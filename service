#!/usr/bin/python
#
# this basically the same as the version used in:
# https://github.com/info-beamer/package-installation-help
# which has the following license:
#
#
# Copyright (C) 2016 Florian Wesch <fw@dividuum.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#

from hosted import NODE

import os
import sys
import fcntl
import socket
import struct
import requests
import time
import traceback
import subprocess
from functools import partial
from heapq import heappush, heapreplace


def send_kv(key, val):
    NODE.send('/update/%s:%s' % (key, val))


def get_default_gateway():
    with open("/proc/net/route") as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                continue
            return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))


def get_mac(ifname):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        info = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', ifname[:15]))
        return ':'.join(['%02x' % ord(char) for char in info[18:24]])
    except IOError:
        return "<no mac>"
    except:
        return None


def get_ipv4(ifname):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        info = fcntl.ioctl(s.fileno(), 0x8915, struct.pack('256s', ifname[:15]))
        ip = socket.inet_ntoa(info[20:24])

        mask = struct.unpack('>I', fcntl.ioctl(s.fileno(), 0x891b, struct.pack('256s', ifname))[20:24])[0]
        mask = bin(mask)[2:].count('1')  # Remember: not everything has to be performance optimal :-)
        return "%s/%d" % (ip, mask)
    except IOError:
        return "<no ipv4>"
    except:
        return None


def check_network():
    return os.path.exists('/sd/config/network') and "static" or "dhcp"


def check_internet():
    try:
        r = requests.get("http://ping.infobeamer.com/ping", timeout=10, headers={
            'User-Agent': 'info-beamer syncer/network-check',
        })
        r.raise_for_status()
        if r.content == "pong":
            return "online"
        else:
            return "filtered"
    except:
        traceback.print_exc()
        return "offline"


def check_tvservice():
    try:
        return subprocess.check_output("tvservice", "-s")
    except:
        traceback.print_exc()
        return "unknown resolution"


tests = [
    (1,  "ethmac",  partial(get_mac, "eth0")),
    (1,  "wlanmac", partial(get_mac, "wlan0")),
    (1,  "ethip",   partial(get_ipv4, "eth0")),
    (1,  "wlanip",  partial(get_ipv4, "wlan0")),
    (1,  "gw",      get_default_gateway),
    (10, "online",  check_internet),
    (5,  "network", check_network),
    (10, "tvservice", check_tvservice),
]

q = []
now = time.time()
for interval, key, val_fn in tests:
    heappush(q, (now, (interval, key, val_fn)))


def run_next_test():
    now = time.time()
    t, test = q[0]
    if now < t:
        return False
    interval, key, val_fn = test
    heapreplace(q, (now + interval, test))
    val = val_fn()
    if val is not None:
        send_kv(key, val)
    return True


if __name__ == "__main__":
    while 1:
        try:
            if not run_next_test():
                time.sleep(0.2)
        except KeyboardInterrupt:
            raise
        except:
            traceback.print_exc()
            time.sleep(1)
